{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["numLessons","Object","keys","lessonList","length","lessonNumbers","Array","map","x","App","props","handleStartQuiz","wordIndices","state","lessonNum","shuffled","shuffleArray","correctOptionIndex","Math","floor","random","isOpenEnded","currentWordIndex","getQuestionAndAnswers","japaneseAnswerOpenEnded","japaneseAnswerOpenEndedHiragana","setState","isInQuiz","questionsIndices","currentQnNum","numCorrect","previousQuestion","isCorrect","english","japanese","correctAnswer","correctAnswerHiragana","answeredQuestions","answerFormValue","array","i","j","temp","handleEndQuiz","undefined","handleLessonSelect","event","selectedLessonNum","parseInt","target","value","handleThemeSwitch","isBlueTheme","checked","handleModeSwitch","handleAnswerChange","questionIndex","questionWord","vocabulary","englishQuestion","questionBlank","japaneseAnswerString","japaneseAnswerStringHiragana","japanese_all_hiragana","preJapaneseParticle","preJapanese","partOfSpeech","includes","postJapanese","correctJapaneseOption","incorrectJapaneseOptions","getIncorrectOptions","indexQuestionWord","posListForQuestionWord","posList","indexInPosList","indexOf","optionIndices","randomIndex","getRandomInt","push","index","indexToVocab","incorrectWord","min","max","ceil","handleOptionSelect","newNumCorrect","currQnNum","nextQnNum","currentAnsweredQuestions","japaneseAllHiragana","handleAnswerSubmit","nextWordIndex","nextJapaneseAnswerOpenEnded","nextJapaneseAnswerOpenEndedHiragana","preventDefault","content","themeColor","this","numTotal","isQuizEnd","numWrong","Row","className","onClick","Col","Button","block","variant","PreviousQuestionCard","QuestionCard","title","questions","answerContent","options","splice","MCQOptions","text","number","key","toString","Form","Group","controlId","Label","Control","as","onChange","Check","type","id","label","Helmet","name","bg","Container","fluid","React","Component","NavBar","Navbar","expand","Brand","href","Card","Header","Body","Title","Text","bgStyle","PreviousQuestionCardCompact","Footer","Badge","ButtonGroup","vertical","OpenEndedAnswerForm","placeholder","SummaryTable","cards","question","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.457350b6.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport {\r\n  Row,\r\n  Col,\r\n  Container,\r\n  Badge,\r\n  Navbar,\r\n  Card,\r\n  Button,\r\n  ButtonGroup,\r\n  Form\r\n} from \"react-bootstrap\";\r\n\r\nimport \"./App.css\";\r\nimport vocabulary from \"./vocabulary.json\";\r\nimport posList from \"./poslist.json\";\r\nimport lessonList from \"./lessonlist.json\";\r\n\r\nconst numLessons = Object.keys(lessonList).length;\r\nconst lessonNumbers = [...Array(numLessons).keys()].map(x => x + 1);\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isInQuiz: false,\r\n      lessonNum: 1,\r\n      isBlueTheme: false, // checked false == Red theme\r\n      isOpenEnded: false\r\n    };\r\n  }\r\n\r\n  handleStartQuiz = () => {\r\n    const wordIndices = lessonList[this.state.lessonNum];\r\n    const shuffled = this.shuffleArray(wordIndices);\r\n\r\n    const correctOptionIndex = Math.floor(Math.random() * 4);\r\n    if (this.state.isOpenEnded) {\r\n      const currentWordIndex = shuffled[0];\r\n      const {\r\n        japaneseAnswerOpenEnded,\r\n        japaneseAnswerOpenEndedHiragana\r\n      } = this.getQuestionAndAnswers(currentWordIndex);\r\n      this.setState({\r\n        isInQuiz: true,\r\n        questionsIndices: shuffled,\r\n        currentQnNum: 0,\r\n        numCorrect: 0,\r\n        previousQuestion: {\r\n          isCorrect: null,\r\n          english: null,\r\n          japanese: null\r\n        },\r\n        correctAnswer: japaneseAnswerOpenEnded,\r\n        correctAnswerHiragana: japaneseAnswerOpenEndedHiragana,\r\n        answeredQuestions: [],\r\n        answerFormValue: \"\"\r\n      });\r\n    } else {\r\n      this.setState({\r\n        isInQuiz: true,\r\n        questionsIndices: shuffled,\r\n        currentQnNum: 0,\r\n        numCorrect: 0,\r\n        previousQuestion: {\r\n          isCorrect: null,\r\n          english: null,\r\n          japanese: null\r\n        },\r\n        correctOptionIndex: correctOptionIndex,\r\n        answeredQuestions: []\r\n      });\r\n    }\r\n  };\r\n\r\n  shuffleArray = array => {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * i);\r\n      const temp = array[i];\r\n      array[i] = array[j];\r\n      array[j] = temp;\r\n    }\r\n    return array;\r\n  };\r\n\r\n  handleEndQuiz = () => {\r\n    this.setState({\r\n      isInQuiz: false,\r\n      questionsIndices: undefined,\r\n      currentQnNum: undefined,\r\n      previousQuestion: undefined,\r\n      correctOptionIndex: undefined,\r\n      answeredQuestions: undefined\r\n    });\r\n  };\r\n\r\n  handleLessonSelect = event => {\r\n    const selectedLessonNum = parseInt(event.target.value);\r\n    this.setState({ lessonNum: selectedLessonNum });\r\n  };\r\n\r\n  handleThemeSwitch = event => {\r\n    this.setState({ isBlueTheme: event.target.checked });\r\n  };\r\n\r\n  handleModeSwitch = event => {\r\n    this.setState({ isOpenEnded: event.target.checked });\r\n  };\r\n\r\n  handleAnswerChange = event => {\r\n    this.setState({ answerFormValue: event.target.value });\r\n  };\r\n\r\n  getQuestionAndAnswers = questionIndex => {\r\n    const questionWord = vocabulary[questionIndex];\r\n    const englishQuestion = questionWord.english;\r\n    let questionBlank = \"(    ?    )\";\r\n    let japaneseAnswerString = `[${questionWord.japanese}]`;\r\n    let japaneseAnswerStringHiragana = `[${questionWord.japanese_all_hiragana}]`;\r\n    if (questionWord.preJapaneseParticle !== \"\") {\r\n      questionBlank = questionWord.preJapaneseParticle + \" \" + questionBlank;\r\n      japaneseAnswerString =\r\n        questionWord.preJapaneseParticle + \" \" + japaneseAnswerString;\r\n      japaneseAnswerStringHiragana =\r\n        questionWord.preJapaneseParticle + \" \" + japaneseAnswerStringHiragana;\r\n    }\r\n    if (questionWord.preJapanese !== \"\") {\r\n      questionBlank = questionWord.preJapanese + \" \" + questionBlank;\r\n      japaneseAnswerString =\r\n        questionWord.preJapanese + \" \" + japaneseAnswerString;\r\n      japaneseAnswerStringHiragana =\r\n        questionWord.preJapanese + \" \" + japaneseAnswerStringHiragana;\r\n    }\r\n    if (questionWord.partOfSpeech.includes(\"na-adj\")) {\r\n      questionBlank = questionBlank + \"[な]\";\r\n      japaneseAnswerString = japaneseAnswerString + \"[な]\";\r\n      japaneseAnswerStringHiragana = japaneseAnswerStringHiragana + \"[な]\";\r\n    }\r\n    if (questionWord.postJapanese !== \"\") {\r\n      questionBlank = questionBlank + \" \" + questionWord.postJapanese;\r\n      japaneseAnswerString =\r\n        japaneseAnswerString + \" \" + questionWord.postJapanese;\r\n      japaneseAnswerStringHiragana =\r\n        japaneseAnswerStringHiragana + \" \" + questionWord.postJapanese;\r\n    }\r\n    let correctJapaneseOption =\r\n      questionWord.japanese + \" [\" + questionWord.japanese_all_hiragana + \"]\";\r\n    const incorrectJapaneseOptions = this.getIncorrectOptions(\r\n      questionWord.partOfSpeech[0],\r\n      questionIndex\r\n    );\r\n    const japaneseAnswerOpenEnded = questionWord.japanese;\r\n    const japaneseAnswerOpenEndedHiragana = questionWord.japanese_all_hiragana;\r\n    return {\r\n      englishQuestion,\r\n      questionBlank,\r\n      japaneseAnswerString,\r\n      japaneseAnswerStringHiragana,\r\n      correctJapaneseOption,\r\n      incorrectJapaneseOptions,\r\n      japaneseAnswerOpenEnded,\r\n      japaneseAnswerOpenEndedHiragana\r\n    };\r\n  };\r\n\r\n  getIncorrectOptions = (partOfSpeech, indexQuestionWord) => {\r\n    const posListForQuestionWord = posList[partOfSpeech];\r\n    const indexInPosList = posListForQuestionWord.indexOf(indexQuestionWord);\r\n    let optionIndices = [];\r\n    while (optionIndices.length < 3) {\r\n      const randomIndex = this.getRandomInt(\r\n        0,\r\n        posListForQuestionWord.length - 1\r\n      );\r\n      if (\r\n        randomIndex !== indexInPosList &&\r\n        !optionIndices.includes(randomIndex)\r\n      ) {\r\n        optionIndices.push(randomIndex);\r\n      }\r\n    }\r\n    const incorrectOptions = optionIndices.map(index => {\r\n      const indexToVocab = posListForQuestionWord[index];\r\n      const incorrectWord = vocabulary[indexToVocab];\r\n      const incorrecOption =\r\n        incorrectWord.japanese +\r\n        \" [\" +\r\n        incorrectWord.japanese_all_hiragana +\r\n        \"]\";\r\n      return incorrecOption;\r\n    });\r\n    return incorrectOptions;\r\n  };\r\n\r\n  getRandomInt = (min, max) => {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n  };\r\n\r\n  handleOptionSelect = event => {\r\n    const isCorrect =\r\n      parseInt(event.target.value) === this.state.correctOptionIndex;\r\n    let newNumCorrect = this.state.numCorrect;\r\n    if (isCorrect) {\r\n      newNumCorrect = newNumCorrect + 1;\r\n    }\r\n\r\n    const currQnNum = this.state.currentQnNum;\r\n    const nextQnNum = this.state.currentQnNum + 1;\r\n\r\n    const currentWordIndex = this.state.questionsIndices[currQnNum];\r\n    const {\r\n      englishQuestion,\r\n      japaneseAnswerString,\r\n      japaneseAnswerStringHiragana\r\n    } = this.getQuestionAndAnswers(currentWordIndex);\r\n\r\n    const correctOptionIndex = Math.floor(Math.random() * 4);\r\n\r\n    const currentAnsweredQuestions = this.state.answeredQuestions;\r\n    currentAnsweredQuestions.push({\r\n      isCorrect,\r\n      english: englishQuestion,\r\n      japanese: japaneseAnswerString,\r\n      japaneseAllHiragana: japaneseAnswerStringHiragana\r\n    });\r\n\r\n    this.setState({\r\n      currentQnNum: nextQnNum,\r\n      previousQuestion: {\r\n        isCorrect: isCorrect,\r\n        english: englishQuestion,\r\n        japanese: japaneseAnswerString,\r\n        japaneseAllHiragana: japaneseAnswerStringHiragana\r\n      },\r\n      numCorrect: newNumCorrect,\r\n      correctOptionIndex: correctOptionIndex,\r\n      answeredQuestions: currentAnsweredQuestions\r\n    });\r\n  };\r\n\r\n  handleAnswerSubmit = event => {\r\n    const isCorrect =\r\n      this.state.answerFormValue === this.state.correctAnswer ||\r\n      this.state.answerFormValue === this.state.correctAnswerHiragana;\r\n    let newNumCorrect = this.state.numCorrect;\r\n    if (isCorrect) {\r\n      newNumCorrect = newNumCorrect + 1;\r\n    }\r\n\r\n    const currQnNum = this.state.currentQnNum;\r\n    const nextQnNum = this.state.currentQnNum + 1;\r\n    const currentWordIndex = this.state.questionsIndices[currQnNum];\r\n    const nextWordIndex = this.state.questionsIndices[nextQnNum];\r\n    const {\r\n      englishQuestion,\r\n      japaneseAnswerString,\r\n      japaneseAnswerStringHiragana\r\n    } = this.getQuestionAndAnswers(currentWordIndex);\r\n\r\n    const numTotal = this.state.questionsIndices.length;\r\n    const isQuizEnd = nextQnNum >= numTotal;\r\n    let nextJapaneseAnswerOpenEnded = \"\";\r\n    let nextJapaneseAnswerOpenEndedHiragana = \"\";\r\n    if (!isQuizEnd) {\r\n      const {\r\n        japaneseAnswerOpenEnded,\r\n        japaneseAnswerOpenEndedHiragana\r\n      } = this.getQuestionAndAnswers(nextWordIndex);\r\n      nextJapaneseAnswerOpenEnded = japaneseAnswerOpenEnded;\r\n      nextJapaneseAnswerOpenEndedHiragana = japaneseAnswerOpenEndedHiragana;\r\n    }\r\n\r\n    const currentAnsweredQuestions = this.state.answeredQuestions;\r\n    currentAnsweredQuestions.push({\r\n      isCorrect,\r\n      english: englishQuestion,\r\n      japanese: japaneseAnswerString,\r\n      japaneseAllHiragana: japaneseAnswerStringHiragana\r\n    });\r\n\r\n    this.setState({\r\n      currentQnNum: nextQnNum,\r\n      previousQuestion: {\r\n        isCorrect: isCorrect,\r\n        english: englishQuestion,\r\n        japanese: japaneseAnswerString,\r\n        japaneseAllHiragana: japaneseAnswerStringHiragana\r\n      },\r\n      numCorrect: newNumCorrect,\r\n      correctAnswer: nextJapaneseAnswerOpenEnded,\r\n      correctAnswerHiragana: nextJapaneseAnswerOpenEndedHiragana,\r\n      answeredQuestions: currentAnsweredQuestions,\r\n      answerFormValue: \"\"\r\n    });\r\n\r\n    event.preventDefault();\r\n  };\r\n\r\n  render() {\r\n    const themeColor = this.state.isBlueTheme ? \"primary\" : \"danger\";\r\n    const isInQuiz = this.state.isInQuiz;\r\n    const isOpenEnded = this.state.isOpenEnded;\r\n    let content;\r\n    if (isInQuiz) {\r\n      const numTotal = this.state.questionsIndices.length;\r\n      const currentQnNum = this.state.currentQnNum; // 0-index\r\n      const isQuizEnd = currentQnNum >= numTotal;\r\n      const numCorrect = this.state.numCorrect;\r\n      const numWrong = currentQnNum - numCorrect;\r\n      if (isQuizEnd) {\r\n        content = (\r\n          <>\r\n            <Row className=\"quit-button\" onClick={this.handleEndQuiz}>\r\n              <Col>\r\n                <Button block variant={`outline-${themeColor}`}>\r\n                  Quit\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n            <Row className=\"previous-question-card\">\r\n              <Col>\r\n                <PreviousQuestionCard\r\n                  previousQuestion={this.state.previousQuestion}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row className=\"question-card\">\r\n              <Col>\r\n                <QuestionCard\r\n                  title=\"Quiz Over\"\r\n                  currentQnNum={currentQnNum}\r\n                  numTotal={numTotal}\r\n                  numCorrect={numCorrect}\r\n                  numWrong={numWrong}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row className=\"question-card\">\r\n              <Col>\r\n                <SummaryTable questions={this.state.answeredQuestions} />\r\n              </Col>\r\n            </Row>\r\n          </>\r\n        );\r\n      } else {\r\n        const currentWordIndex = this.state.questionsIndices[currentQnNum];\r\n        const { englishQuestion, questionBlank } = this.getQuestionAndAnswers(\r\n          currentWordIndex\r\n        );\r\n        let answerContent = \"\";\r\n        if (isOpenEnded) {\r\n          answerContent = (\r\n            <>\r\n              <OpenEndedAnswerForm\r\n                themeColor={themeColor}\r\n                value={this.state.answerFormValue}\r\n                handleAnswerSubmit={this.handleAnswerSubmit}\r\n                handleAnswerChange={this.handleAnswerChange}\r\n              />\r\n            </>\r\n          );\r\n        } else {\r\n          const currentWordIndex = this.state.questionsIndices[currentQnNum];\r\n          const {\r\n            correctJapaneseOption,\r\n            incorrectJapaneseOptions\r\n          } = this.getQuestionAndAnswers(currentWordIndex);\r\n          const correctOptionIndex = this.state.correctOptionIndex;\r\n          let options = incorrectJapaneseOptions;\r\n          options.splice(correctOptionIndex, 0, correctJapaneseOption);\r\n          answerContent = (\r\n            <>\r\n              <MCQOptions\r\n                themeColor={themeColor}\r\n                handleOptionSelect={this.handleOptionSelect}\r\n                options={options}\r\n              />\r\n            </>\r\n          );\r\n        }\r\n        content = (\r\n          <>\r\n            <Row className=\"quit-button\" onClick={this.handleEndQuiz}>\r\n              <Col>\r\n                <Button block variant={`outline-${themeColor}`}>\r\n                  Quit\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n            <Row className=\"previous-question-card\">\r\n              <Col>\r\n                <PreviousQuestionCard\r\n                  previousQuestion={this.state.previousQuestion}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row className=\"question-card\">\r\n              <Col>\r\n                <QuestionCard\r\n                  title={englishQuestion}\r\n                  text={questionBlank}\r\n                  currentQnNum={currentQnNum + 1}\r\n                  numTotal={numTotal}\r\n                  numCorrect={numCorrect}\r\n                  numWrong={numWrong}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row className=\"answer-buttons\">\r\n              <Col>{answerContent}</Col>\r\n            </Row>\r\n          </>\r\n        );\r\n      }\r\n    } else {\r\n      // Main screen\r\n      const options = lessonNumbers.map(number => {\r\n        return (\r\n          <option key={number.toString()} value={number}>\r\n            {number}\r\n          </option>\r\n        );\r\n      });\r\n      content = (\r\n        <>\r\n          <Row>\r\n            <Col>\r\n              <Button\r\n                block\r\n                variant={`outline-${themeColor}`}\r\n                onClick={this.handleStartQuiz}\r\n              >\r\n                Start\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <Form.Group\r\n                className=\"text-center\"\r\n                controlId=\"exampleForm.ControlSelect1\"\r\n              >\r\n                <Form.Label>Select Lesson</Form.Label>\r\n                <Form.Control\r\n                  as=\"select\"\r\n                  value={this.state.lessonNum}\r\n                  onChange={this.handleLessonSelect}\r\n                >\r\n                  {options}\r\n                </Form.Control>\r\n                <br></br>\r\n                <Form.Check\r\n                  type=\"switch\"\r\n                  id=\"mode-switch\"\r\n                  label=\"MCQ/Open Ended\"\r\n                  checked={this.state.isOpenEnded}\r\n                  onChange={this.handleModeSwitch}\r\n                />\r\n                <br></br>\r\n                <Form.Check\r\n                  type=\"switch\"\r\n                  id=\"theme-switch\"\r\n                  label=\"Red/Blue\"\r\n                  checked={this.state.isBlueTheme}\r\n                  onChange={this.handleThemeSwitch}\r\n                />\r\n              </Form.Group>\r\n            </Col>\r\n          </Row>\r\n        </>\r\n      );\r\n    }\r\n    return (\r\n      <div>\r\n        <Helmet>\r\n          <title>Oboeru 覚える MCQ Vocab Quiz App</title>\r\n          <meta name=\"author\" content=\"Neil Brian Labayna\" />\r\n          <meta\r\n            name=\"description\"\r\n            content=\"MCQ Quiz App for Japanese Langauge\"\r\n          />\r\n        </Helmet>\r\n        <NavBar bg={themeColor} />\r\n        <Container className=\"content\" fluid>\r\n          {content}\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst NavBar = props => {\r\n  return (\r\n    <Navbar bg={props.bg} variant=\"dark\" expand=\"lg\">\r\n      <Navbar.Brand href=\"#home\">Oboeru</Navbar.Brand>\r\n    </Navbar>\r\n  );\r\n};\r\n\r\nfunction PreviousQuestionCard(props) {\r\n  const {\r\n    isCorrect,\r\n    english,\r\n    japanese,\r\n    japaneseAllHiragana\r\n  } = props.previousQuestion;\r\n  if (isCorrect === null) {\r\n    return (\r\n      <Card bg=\"light\" text=\"black\" className=\"text-center\">\r\n        <Card.Header>Previous Question</Card.Header>\r\n        <Card.Body>\r\n          <Card.Title></Card.Title>\r\n          <Card.Text></Card.Text>\r\n        </Card.Body>\r\n      </Card>\r\n    );\r\n  }\r\n  const bgStyle = isCorrect ? \"success\" : \"danger\";\r\n  return (\r\n    <Card bg={bgStyle} text=\"white\" className=\"text-center\">\r\n      <Card.Header>Previous Question</Card.Header>\r\n      <Card.Body>\r\n        <Card.Title>{english}</Card.Title>\r\n        <Card.Text>\r\n          {japanese}\r\n          <br></br>\r\n          {japaneseAllHiragana}\r\n        </Card.Text>\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n}\r\n\r\nfunction PreviousQuestionCardCompact(props) {\r\n  const {\r\n    isCorrect,\r\n    english,\r\n    japanese,\r\n    japaneseAllHiragana\r\n  } = props.previousQuestion;\r\n  const bgStyle = isCorrect ? \"success\" : \"danger\";\r\n  return (\r\n    <Card bg={bgStyle} text=\"white\" className=\"text-center\">\r\n      <Card.Body>\r\n        <Card.Title>{english}</Card.Title>\r\n        <Card.Text>\r\n          {japanese}\r\n          <br></br>\r\n          {japaneseAllHiragana}\r\n        </Card.Text>\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n}\r\n\r\nfunction QuestionCard(props) {\r\n  return (\r\n    <Card className=\"text-center\">\r\n      <Card.Body>\r\n        <Card.Title>{props.title}</Card.Title>\r\n        <Card.Text>{props.text}</Card.Text>\r\n      </Card.Body>\r\n      <Card.Footer>\r\n        Q <Badge variant=\"secondary\">{props.currentQnNum}</Badge> out of{\" \"}\r\n        <Badge variant=\"secondary\">{props.numTotal}</Badge>{\" \"}\r\n        <i className=\"fa fa-check\"></i>{\" \"}\r\n        <Badge variant=\"success\">{props.numCorrect}</Badge>{\" \"}\r\n        <i className=\"fa fa-times\"></i>{\" \"}\r\n        <Badge variant=\"danger\">{props.numWrong}</Badge>\r\n      </Card.Footer>\r\n    </Card>\r\n  );\r\n}\r\n\r\nfunction MCQOptions(props) {\r\n  const themeColor = props.themeColor;\r\n  return (\r\n    <ButtonGroup vertical className=\"special\">\r\n      <Button\r\n        value={0}\r\n        variant={`outline-${themeColor}`}\r\n        onClick={props.handleOptionSelect}\r\n      >\r\n        {props.options[0]}\r\n      </Button>\r\n      <Button\r\n        value={1}\r\n        variant={`outline-${themeColor}`}\r\n        onClick={props.handleOptionSelect}\r\n      >\r\n        {props.options[1]}\r\n      </Button>\r\n      <Button\r\n        value={2}\r\n        variant={`outline-${themeColor}`}\r\n        onClick={props.handleOptionSelect}\r\n      >\r\n        {props.options[2]}\r\n      </Button>\r\n      <Button\r\n        value={3}\r\n        variant={`outline-${themeColor}`}\r\n        onClick={props.handleOptionSelect}\r\n      >\r\n        {props.options[3]}\r\n      </Button>\r\n    </ButtonGroup>\r\n  );\r\n}\r\n\r\nconst OpenEndedAnswerForm = props => {\r\n  return (\r\n    <>\r\n      {/* <form onSubmit={props.handleAnswerSubmit}>\r\n        <label>\r\n          <input\r\n            type=\"text\"\r\n            value={props.value}\r\n            onChange={props.handleAnswerChange}\r\n          />\r\n        </label>\r\n        <input type=\"submit\" value=\"Submit\" />\r\n      </form> */}\r\n      <Form>\r\n        <Form.Group controlId=\"formAnswer\">\r\n          <Form.Label>Answer</Form.Label>\r\n          <Form.Control\r\n            type=\"answer\"\r\n            placeholder=\"Enter answer here\"\r\n            value={props.value}\r\n            onChange={props.handleAnswerChange}\r\n          />\r\n          <Form.Text className=\"text-muted\">\r\n            If your answer includes kanji, you must type exactly the same as the\r\n            textbook's entry.\r\n          </Form.Text>\r\n        </Form.Group>\r\n        <Button\r\n          variant={props.themeColor}\r\n          type=\"submit\"\r\n          onClick={props.handleAnswerSubmit}\r\n        >\r\n          Submit\r\n        </Button>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n\r\nconst SummaryTable = props => {\r\n  const cards = props.questions.map((question, index) => {\r\n    return (\r\n      <PreviousQuestionCardCompact key={index} previousQuestion={question} />\r\n    );\r\n  });\r\n  return (\r\n    <>\r\n      <h3 className=\"text-center\">Summary</h3>\r\n      {cards}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"font-awesome/css/font-awesome.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}