{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["numLessons","Object","keys","lessonList","length","lessonNumbers","Array","map","x","App","props","handleStartQuiz","wordIndices","state","lessonNum","shuffled","shuffleArray","correctOptionIndex","Math","floor","random","setState","isInQuiz","questionsIndices","currentQnNum","numCorrect","previousQuestion","isCorrect","english","japanese","array","i","j","temp","handleEndQuiz","undefined","handleLessonSelect","event","selectedLessonNum","parseInt","target","value","getQuestionAndAnswers","questionIndex","questionWord","vocabulary","englishQuestion","questionBlank","japaneseAnswerString","japaneseAnswerStringHiragana","japanese_all_hiragana","preJapaneseParticle","preJapanese","postJapanese","correctJapaneseOption","incorrectJapaneseOptions","getIncorrectOptions","partOfSpeech","indexQuestionWord","posListForQuestionWord","posList","indexInPosList","indexOf","optionIndices","randomIndex","getRandomInt","includes","push","index","indexToVocab","incorrectWord","min","max","ceil","handleOptionSelect","newNumCorrect","currQnNum","currentWordIndex","nextQnNum","japaneseAllHiragana","content","this","numTotal","isQuizEnd","numWrong","Row","className","onClick","Col","Button","block","variant","PreviousQuestionCard","QuestionCard","title","options","splice","text","MCQOptions","number","key","toString","Form","Group","controlId","Label","Control","as","onChange","Helmet","Container","fluid","React","Component","NavBar","Navbar","bg","expand","Brand","href","Card","Header","Body","Title","Text","bgStyle","Footer","Badge","ButtonGroup","vertical","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8db4075f.chunk.js","sourcesContent":["import React from \"react\";\nimport { Helmet } from \"react-helmet\";\n\nimport {\n  Row,\n  Col,\n  Container,\n  Badge,\n  Navbar,\n  Card,\n  Button,\n  ButtonGroup,\n  Form\n} from \"react-bootstrap\";\n\nimport \"./App.css\";\nimport vocabulary from \"./vocabulary.json\";\nimport posList from \"./poslist.json\";\nimport lessonList from \"./lessonlist.json\";\n\nconst numLessons = Object.keys(lessonList).length;\nconst lessonNumbers = [...Array(numLessons).keys()].map(x => x + 1);\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isInQuiz: false,\n      lessonNum: 1\n    };\n  }\n\n  handleStartQuiz = () => {\n    const wordIndices = lessonList[this.state.lessonNum];\n    const shuffled = this.shuffleArray(wordIndices);\n\n    const correctOptionIndex = Math.floor(Math.random() * 4);\n    this.setState({\n      isInQuiz: true,\n      questionsIndices: shuffled,\n      currentQnNum: 0,\n      numCorrect: 0,\n      previousQuestion: {\n        isCorrect: null,\n        english: null,\n        japanese: null\n      },\n      correctOptionIndex: correctOptionIndex\n    });\n  };\n\n  shuffleArray = array => {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * i);\n      const temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n    return array;\n  };\n\n  handleEndQuiz = () => {\n    this.setState({\n      isInQuiz: false,\n      questionsIndices: undefined,\n      currentQnNum: undefined,\n      previousQuestion: undefined\n    });\n  };\n\n  handleLessonSelect = event => {\n    const selectedLessonNum = parseInt(event.target.value);\n    this.setState({ lessonNum: selectedLessonNum });\n  };\n\n  getQuestionAndAnswers = questionIndex => {\n    const questionWord = vocabulary[questionIndex];\n    const englishQuestion = questionWord.english;\n    let questionBlank = \"(    ?    )\";\n    let japaneseAnswerString = `[${questionWord.japanese}]`;\n    let japaneseAnswerStringHiragana = `[${questionWord.japanese_all_hiragana}]`;\n    if (questionWord.preJapaneseParticle !== \"\") {\n      questionBlank = questionWord.preJapaneseParticle + \" \" + questionBlank;\n      japaneseAnswerString =\n        questionWord.preJapaneseParticle + \" \" + japaneseAnswerString;\n      japaneseAnswerStringHiragana =\n        questionWord.preJapaneseParticle + \" \" + japaneseAnswerStringHiragana;\n    }\n    if (questionWord.preJapanese !== \"\") {\n      questionBlank = questionWord.preJapanese + \" \" + questionBlank;\n      japaneseAnswerString =\n        questionWord.preJapanese + \" \" + japaneseAnswerString;\n      japaneseAnswerStringHiragana =\n        questionWord.preJapanese + \" \" + japaneseAnswerStringHiragana;\n    }\n    if (questionWord.postJapanese !== \"\") {\n      questionBlank = questionBlank + \" \" + questionWord.postJapanese;\n      japaneseAnswerString =\n        japaneseAnswerString + \" \" + questionWord.postJapanese;\n      japaneseAnswerStringHiragana =\n        japaneseAnswerStringHiragana + \" \" + questionWord.postJapanese;\n    }\n    let correctJapaneseOption =\n      questionWord.japanese + \" [\" + questionWord.japanese_all_hiragana + \"]\";\n    const incorrectJapaneseOptions = this.getIncorrectOptions(\n      questionWord.partOfSpeech[0],\n      questionIndex\n    );\n    return {\n      englishQuestion,\n      questionBlank,\n      japaneseAnswerString,\n      japaneseAnswerStringHiragana,\n      correctJapaneseOption,\n      incorrectJapaneseOptions\n    };\n  };\n\n  getIncorrectOptions = (partOfSpeech, indexQuestionWord) => {\n    const posListForQuestionWord = posList[partOfSpeech];\n    const indexInPosList = posListForQuestionWord.indexOf(indexQuestionWord);\n    let optionIndices = [];\n    while (optionIndices.length < 3) {\n      const randomIndex = this.getRandomInt(\n        0,\n        posListForQuestionWord.length - 1\n      );\n      if (\n        randomIndex !== indexInPosList &&\n        !optionIndices.includes(randomIndex)\n      ) {\n        optionIndices.push(randomIndex);\n      }\n    }\n    const incorrectOptions = optionIndices.map(index => {\n      const indexToVocab = posListForQuestionWord[index];\n      const incorrectWord = vocabulary[indexToVocab];\n      const incorrecOption =\n        incorrectWord.japanese +\n        \" [\" +\n        incorrectWord.japanese_all_hiragana +\n        \"]\";\n      return incorrecOption;\n    });\n    return incorrectOptions;\n  };\n\n  getRandomInt = (min, max) => {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  };\n\n  handleOptionSelect = event => {\n    const isCorrect =\n      parseInt(event.target.value) === this.state.correctOptionIndex;\n    let newNumCorrect = this.state.numCorrect;\n    if (isCorrect) {\n      newNumCorrect = newNumCorrect + 1;\n    }\n    const currQnNum = this.state.currentQnNum;\n    const currentWordIndex = this.state.questionsIndices[currQnNum];\n    const nextQnNum = this.state.currentQnNum + 1;\n    const {\n      englishQuestion,\n      japaneseAnswerString,\n      japaneseAnswerStringHiragana\n    } = this.getQuestionAndAnswers(currentWordIndex);\n    const correctOptionIndex = Math.floor(Math.random() * 4);\n    this.setState({\n      currentQnNum: nextQnNum,\n      previousQuestion: {\n        isCorrect: isCorrect,\n        english: englishQuestion,\n        japanese: japaneseAnswerString,\n        japaneseAllHiragana: japaneseAnswerStringHiragana\n      },\n      numCorrect: newNumCorrect,\n      correctOptionIndex: correctOptionIndex\n    });\n  };\n\n  render() {\n    const isInQuiz = this.state.isInQuiz;\n    let content;\n    if (isInQuiz) {\n      const numTotal = this.state.questionsIndices.length;\n      const currentQnNum = this.state.currentQnNum; // 0-index\n      const isQuizEnd = currentQnNum >= numTotal;\n      const numCorrect = this.state.numCorrect;\n      const numWrong = currentQnNum - numCorrect;\n      if (isQuizEnd) {\n        content = (\n          <>\n            <Row className=\"quit-button\" onClick={this.handleEndQuiz}>\n              <Col>\n                <Button block variant=\"outline-danger\">\n                  Quit\n                </Button>\n              </Col>\n            </Row>\n            <Row className=\"previous-question-card\">\n              <Col>\n                <PreviousQuestionCard\n                  previousQuestion={this.state.previousQuestion}\n                />\n              </Col>\n            </Row>\n            <Row className=\"question-card\">\n              <Col>\n                <QuestionCard\n                  title=\"Quiz Over\"\n                  currentQnNum={currentQnNum}\n                  numTotal={numTotal}\n                  numCorrect={numCorrect}\n                  numWrong={numWrong}\n                />\n              </Col>\n            </Row>\n          </>\n        );\n      } else {\n        const currentWordIndex = this.state.questionsIndices[currentQnNum];\n        const {\n          englishQuestion,\n          questionBlank,\n          correctJapaneseOption,\n          incorrectJapaneseOptions\n        } = this.getQuestionAndAnswers(currentWordIndex);\n        const correctOptionIndex = this.state.correctOptionIndex;\n        let options = incorrectJapaneseOptions;\n        options.splice(correctOptionIndex, 0, correctJapaneseOption);\n\n        content = (\n          <>\n            <Row className=\"quit-button\" onClick={this.handleEndQuiz}>\n              <Col>\n                <Button block variant=\"outline-danger\">\n                  Quit\n                </Button>\n              </Col>\n            </Row>\n            <Row className=\"previous-question-card\">\n              <Col>\n                <PreviousQuestionCard\n                  previousQuestion={this.state.previousQuestion}\n                />\n              </Col>\n            </Row>\n            <Row className=\"question-card\">\n              <Col>\n                <QuestionCard\n                  title={englishQuestion}\n                  text={questionBlank}\n                  currentQnNum={currentQnNum + 1}\n                  numTotal={numTotal}\n                  numCorrect={numCorrect}\n                  numWrong={numWrong}\n                />\n              </Col>\n            </Row>\n            <Row className=\"answer-buttons\">\n              <Col>\n                <MCQOptions\n                  handleOptionSelect={this.handleOptionSelect}\n                  options={options}\n                />\n              </Col>\n            </Row>\n          </>\n        );\n      }\n    } else {\n      const options = lessonNumbers.map(number => {\n        return (\n          <option key={number.toString()} value={number}>\n            {number}\n          </option>\n        );\n      });\n      content = (\n        <>\n          <Row>\n            <Col>\n              <Button\n                block\n                variant=\"outline-danger\"\n                onClick={this.handleStartQuiz}\n              >\n                Start\n              </Button>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <Form.Group controlId=\"exampleForm.ControlSelect1\">\n                <Form.Label>Select Lesson</Form.Label>\n                <Form.Control\n                  as=\"select\"\n                  value={this.state.lessonNum}\n                  onChange={this.handleLessonSelect}\n                >\n                  {options}\n                </Form.Control>\n              </Form.Group>\n            </Col>\n          </Row>\n        </>\n      );\n    }\n    return (\n      <div>\n        <Helmet>\n          <title>Oboeru 覚える MCQ Vocab Quiz App</title>\n        </Helmet>\n        <NavBar />\n        <Container className=\"content\" fluid>\n          {content}\n        </Container>\n      </div>\n    );\n  }\n}\n\nconst NavBar = () => {\n  return (\n    <Navbar bg=\"danger\" variant=\"dark\" expand=\"lg\">\n      <Navbar.Brand href=\"#home\">Oboeru</Navbar.Brand>\n    </Navbar>\n  );\n};\n\nfunction PreviousQuestionCard(props) {\n  const {\n    isCorrect,\n    english,\n    japanese,\n    japaneseAllHiragana\n  } = props.previousQuestion;\n  if (isCorrect === null) {\n    return (\n      <Card bg=\"light\" text=\"black\" className=\"text-center\">\n        <Card.Header>Previous Question</Card.Header>\n        <Card.Body>\n          <Card.Title></Card.Title>\n          <Card.Text></Card.Text>\n        </Card.Body>\n      </Card>\n    );\n  }\n  const bgStyle = isCorrect ? \"success\" : \"danger\";\n  return (\n    <Card bg={bgStyle} text=\"white\" className=\"text-center\">\n      <Card.Header>Previous Question</Card.Header>\n      <Card.Body>\n        <Card.Title>{english}</Card.Title>\n        <Card.Text>\n          {japanese}\n          <br></br>\n          {japaneseAllHiragana}\n        </Card.Text>\n      </Card.Body>\n    </Card>\n  );\n}\n\nfunction QuestionCard(props) {\n  return (\n    <Card className=\"text-center\">\n      <Card.Body>\n        <Card.Title>{props.title}</Card.Title>\n        <Card.Text>{props.text}</Card.Text>\n      </Card.Body>\n      <Card.Footer>\n        Q <Badge variant=\"secondary\">{props.currentQnNum}</Badge> out of{\" \"}\n        <Badge variant=\"secondary\">{props.numTotal}</Badge>{\" \"}\n        <i className=\"fa fa-check\"></i>{\" \"}\n        <Badge variant=\"success\">{props.numCorrect}</Badge>{\" \"}\n        <i className=\"fa fa-times\"></i>{\" \"}\n        <Badge variant=\"danger\">{props.numWrong}</Badge>\n      </Card.Footer>\n    </Card>\n  );\n}\n\nfunction MCQOptions(props) {\n  return (\n    <ButtonGroup vertical className=\"special\">\n      <Button\n        value={0}\n        variant=\"outline-danger\"\n        onClick={props.handleOptionSelect}\n      >\n        {props.options[0]}\n      </Button>\n      <Button\n        value={1}\n        variant=\"outline-danger\"\n        onClick={props.handleOptionSelect}\n      >\n        {props.options[1]}\n      </Button>\n      <Button\n        value={2}\n        variant=\"outline-danger\"\n        onClick={props.handleOptionSelect}\n      >\n        {props.options[2]}\n      </Button>\n      <Button\n        value={3}\n        variant=\"outline-danger\"\n        onClick={props.handleOptionSelect}\n      >\n        {props.options[3]}\n      </Button>\n    </ButtonGroup>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"font-awesome/css/font-awesome.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}